@page "/weather"
@using Ether.ServiceDefaults.Entities;
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject WeatherApiClient WeatherApi

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nome Completo</th>
                <th>Preço</th>
                <th>Ativo</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Id</td>
                    <td>@forecast.LastName, @forecast.FirstName</td>
                    <td>@forecast.Price</td>
                    <td>@forecast.isActive</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Product[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await WeatherApi.GetWeatherAsync();
    }
}